{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reinforcement Learning for Jetbot Introduction This project aimed to build an applicable RL training environment for jetbot. Project layout package.xml # The package configuration file. CMakeList.txt # The Cmake file launch/ start_training.launch # launch file used in python configre/ jetbot_params_deepQ # set parameter for training scripts/ jetbot_start_deepq.py # training entry point jetbot_task_env.py # task environment script jetbot_robot_env.pt # robot environment script docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#reinforcement-learning-for-jetbot","text":"","title":"Reinforcement Learning for Jetbot"},{"location":"#introduction","text":"This project aimed to build an applicable RL training environment for jetbot.","title":"Introduction"},{"location":"#project-layout","text":"package.xml # The package configuration file. CMakeList.txt # The Cmake file launch/ start_training.launch # launch file used in python configre/ jetbot_params_deepQ # set parameter for training scripts/ jetbot_start_deepq.py # training entry point jetbot_task_env.py # task environment script jetbot_robot_env.pt # robot environment script docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"commom_issues/","text":"Common Issues Gazebo Issues 1. PID reading error [ERROR] [1617369469.665635903, 0.160000000]: No p gain specified for pid. Namespace: /jetbot_0/gazebo_ros_control/pid_gains/lt_wheel_joint [ERROR] [1617369469.666604764, 0.160000000]: No p gain specified for pid. Namespace: /jetbot_0/gazebo_ros_control/pid_gains/rt_wheel_joint [wait for solution] 2. Jetbot not moving in Gazebo during the training [wait for solution] Training Issues 1. Training failed after change the parameter 2021-04-02 13:58:20.484572: I tensorflow/core/platform/profile_utils/cpu_utils.cc:112] CPU Frequency: 2900010000 Hz /usr/local/lib/python3.8/dist-packages/numpy/core/fromnumeric.py:3372: RuntimeWarning: Mean of empty slice. return _methods._mean(a, axis=axis, dtype=dtype, /usr/local/lib/python3.8/dist-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in double_scalars ret = ret.dtype.type(ret / rcount) Solution: Close Gazebo and other rqt windows Delete saved_model Server Issues 1. Gazebo come up with a problem while rqt runs fine. libGL error: No matching fbConfigs or visuals found libGL error: failed to load driver: swrast [wait for solution]","title":"Commom Issues"},{"location":"commom_issues/#common-issues","text":"","title":"Common Issues"},{"location":"commom_issues/#gazebo-issues","text":"","title":"Gazebo Issues"},{"location":"commom_issues/#1-pid-reading-error","text":"[ERROR] [1617369469.665635903, 0.160000000]: No p gain specified for pid. Namespace: /jetbot_0/gazebo_ros_control/pid_gains/lt_wheel_joint [ERROR] [1617369469.666604764, 0.160000000]: No p gain specified for pid. Namespace: /jetbot_0/gazebo_ros_control/pid_gains/rt_wheel_joint [wait for solution]","title":"1. PID reading error"},{"location":"commom_issues/#2-jetbot-not-moving-in-gazebo-during-the-training","text":"[wait for solution]","title":"2. Jetbot not moving in Gazebo during the training"},{"location":"commom_issues/#training-issues","text":"","title":"Training Issues"},{"location":"commom_issues/#1-training-failed-after-change-the-parameter","text":"2021-04-02 13:58:20.484572: I tensorflow/core/platform/profile_utils/cpu_utils.cc:112] CPU Frequency: 2900010000 Hz /usr/local/lib/python3.8/dist-packages/numpy/core/fromnumeric.py:3372: RuntimeWarning: Mean of empty slice. return _methods._mean(a, axis=axis, dtype=dtype, /usr/local/lib/python3.8/dist-packages/numpy/core/_methods.py:170: RuntimeWarning: invalid value encountered in double_scalars ret = ret.dtype.type(ret / rcount) Solution: Close Gazebo and other rqt windows Delete saved_model","title":"1. Training failed after change the parameter"},{"location":"commom_issues/#server-issues","text":"","title":"Server Issues"},{"location":"commom_issues/#1-gazebo-come-up-with-a-problem-while-rqt-runs-fine","text":"libGL error: No matching fbConfigs or visuals found libGL error: failed to load driver: swrast [wait for solution]","title":"1. Gazebo come up with a problem while rqt runs fine."},{"location":"install/","text":"Install 1. Install Jetbot gazebo environment Quick install instruction: conda create -n ros ros-noetic-desktop -conda-forge -c robostack && conda activate ros cd ~/catkin_ws/src git clone --recursive https://github.com/jc-bao/Jetbot_RLFormationControl.git cd ..; catkin_make source devel/setup.bash Note: If you want to use gazebo, remeber to install: conda install -y -c robostack ros-noetic-gazebo-ros ros-noetic-gazebo-dev ros-noetic-gazebo-msgs ros-noetic-gazebo-plugins ros-noetic-gazebo-ros-control ros-noetic-gazebo-ros-pkgs ros-noetic-joint-state-controller ros-noetic-diff-drive-controller gazebo 2. Install OpenAI for ROS cd ~/catkin_ws/src git clone https://bitbucket.org/theconstructcore/openai_ros.git cd .. catkin_make source devel/setup.bash rosdep install openai_ros # install OpenAI baselines cd $THE_PATH_YOU_WANT_TO_INSTALL git clone https://github.com/openai/baselines.git cd baselines conda config --add channels conda-forge conda install -c conda-forge tensorflow # 2.4.1 will be installed pip install -e . pip install gast==0.3.3 # compatible with tf 2.4.1 3. Install Jetbot RL cd ~/catkin_ws/src git clone https://github.com/jc-bao/jetbot_rl cd .. catkin_make source devel/setup.bash Extra: Install Mkdocs and Materials conda install -y mkdocs mkdocs-material cd $YOUR_WORK_DIRECTORY mkdocs serve # check if the doc works @ http://localhost:8000/ mkdocs gh-deploy --force # push to github and deploy","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#1-install-jetbot-gazebo-environment","text":"Quick install instruction: conda create -n ros ros-noetic-desktop -conda-forge -c robostack && conda activate ros cd ~/catkin_ws/src git clone --recursive https://github.com/jc-bao/Jetbot_RLFormationControl.git cd ..; catkin_make source devel/setup.bash Note: If you want to use gazebo, remeber to install: conda install -y -c robostack ros-noetic-gazebo-ros ros-noetic-gazebo-dev ros-noetic-gazebo-msgs ros-noetic-gazebo-plugins ros-noetic-gazebo-ros-control ros-noetic-gazebo-ros-pkgs ros-noetic-joint-state-controller ros-noetic-diff-drive-controller gazebo","title":"1. Install Jetbot gazebo environment"},{"location":"install/#2-install-openai-for-ros","text":"cd ~/catkin_ws/src git clone https://bitbucket.org/theconstructcore/openai_ros.git cd .. catkin_make source devel/setup.bash rosdep install openai_ros # install OpenAI baselines cd $THE_PATH_YOU_WANT_TO_INSTALL git clone https://github.com/openai/baselines.git cd baselines conda config --add channels conda-forge conda install -c conda-forge tensorflow # 2.4.1 will be installed pip install -e . pip install gast==0.3.3 # compatible with tf 2.4.1","title":"2. Install OpenAI for ROS"},{"location":"install/#3-install-jetbot-rl","text":"cd ~/catkin_ws/src git clone https://github.com/jc-bao/jetbot_rl cd .. catkin_make source devel/setup.bash","title":"3. Install Jetbot RL"},{"location":"install/#extra-install-mkdocs-and-materials","text":"conda install -y mkdocs mkdocs-material cd $YOUR_WORK_DIRECTORY mkdocs serve # check if the doc works @ http://localhost:8000/ mkdocs gh-deploy --force # push to github and deploy","title":"Extra: Install Mkdocs and Materials"},{"location":"key_concepts/","text":"Key Concept 1. Simulation Environment Structure Basic Structure OpenAI Gym framwork -> Gazebo environment -> Robot environment -> Task Environment OpenAI Gym framwork: provided by OpenAI, the underlying code provided by OpenAI.","title":"Key Concepts"},{"location":"key_concepts/#key-concept","text":"","title":"Key Concept"},{"location":"key_concepts/#1-simulation-environment-structure","text":"Basic Structure OpenAI Gym framwork -> Gazebo environment -> Robot environment -> Task Environment OpenAI Gym framwork: provided by OpenAI, the underlying code provided by OpenAI.","title":"1. Simulation Environment Structure"},{"location":"reference/","text":"Reference Simulation A formation control project deployed on Turtlebot3 by Cambridge team Git Paper Hardware Implementation \ud83c\udf1fDiff drive with Jetson Nano and Arduino Video Git Website Pros: a well-done project control with Arduino with open source code. ROS navigation package implemented. Cons: not using ROS Serial, need futher work. Self driving car with Jetson Nano based on Arduino Video Website Pros: With detailed hardware demostration . Cons: only has finished arduino part and not open source. James Bruton's project on ROS Video Git Pros: Open source Works on NVIDIA Xavier NX gmapping and navgation works fine. Cons: Different motor and model ROS Serial Tutorial Video Docs","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#simulation","text":"","title":"Simulation"},{"location":"reference/#a-formation-control-project-deployed-on-turtlebot3-by-cambridge-team-git-paper","text":"","title":"A formation control project deployed on Turtlebot3 by Cambridge team Git Paper"},{"location":"reference/#hardware-implementation","text":"","title":"Hardware Implementation"},{"location":"reference/#diff-drive-with-jetson-nano-and-arduino-video-git-website","text":"Pros: a well-done project control with Arduino with open source code. ROS navigation package implemented. Cons: not using ROS Serial, need futher work.","title":"\ud83c\udf1fDiff drive with Jetson Nano and Arduino Video Git Website"},{"location":"reference/#self-driving-car-with-jetson-nano-based-on-arduino-video-website","text":"Pros: With detailed hardware demostration . Cons: only has finished arduino part and not open source.","title":"Self driving car with Jetson Nano based on Arduino Video Website"},{"location":"reference/#james-brutons-project-on-ros-video-git","text":"Pros: Open source Works on NVIDIA Xavier NX gmapping and navgation works fine. Cons: Different motor and model","title":"James Bruton's project on ROS Video Git"},{"location":"reference/#ros-serial-tutorial-video-docs","text":"","title":"ROS Serial Tutorial Video Docs"},{"location":"use_cases/","text":"Use Cases 1. Develop your own RL Task Robot Environment Jetbot_robot_env.py The thing you need to do in this file: Open Gazebo Determine how to control Determine which sensor to use Set virtual method for Task Environment Note: All staff you need to change in the code is commented by TODO in code. Details Init robot envrionment from gazebo environment. python class JetbotRobotEnv(robot_gazebo_env.RobotGazeboEnv): Choose your own controller python self.controllers_list = ['jetbot_joint_state_controller', 'jetbot_velocity_controller' ] Note : use this to get controller: $ rosservice call /jetbot_0/controller_manager/list_controllers * Change the namespace python self.robot_name_space = \"jetbot_0\" Note : use this to get the namespace $ rostopic list | grep controller Change Actions 2. Start training roslaunch jetbot_rl start_training.launch 3. Plot Training Result Run rqt_multipolt rosrun rqt_multiplot rqt_multiplot Choose configure -> choose topic [openai/reward] -> choose start plot","title":"Use Cases"},{"location":"use_cases/#use-cases","text":"","title":"Use Cases"},{"location":"use_cases/#1-develop-your-own-rl-task","text":"Robot Environment Jetbot_robot_env.py The thing you need to do in this file: Open Gazebo Determine how to control Determine which sensor to use Set virtual method for Task Environment Note: All staff you need to change in the code is commented by TODO in code. Details Init robot envrionment from gazebo environment. python class JetbotRobotEnv(robot_gazebo_env.RobotGazeboEnv): Choose your own controller python self.controllers_list = ['jetbot_joint_state_controller', 'jetbot_velocity_controller' ] Note : use this to get controller: $ rosservice call /jetbot_0/controller_manager/list_controllers * Change the namespace python self.robot_name_space = \"jetbot_0\" Note : use this to get the namespace $ rostopic list | grep controller Change Actions","title":"1. Develop your own RL Task"},{"location":"use_cases/#2-start-training","text":"roslaunch jetbot_rl start_training.launch","title":"2. Start training"},{"location":"use_cases/#3-plot-training-result","text":"Run rqt_multipolt rosrun rqt_multiplot rqt_multiplot Choose configure -> choose topic [openai/reward] -> choose start plot","title":"3. Plot Training Result"}]}